{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///Users/kalash/Desktop/fullstackprojects/fyntra/frontend/app/api/chart/route.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport axios from \"axios\";\n\nconst TWELVE_DATA_API_KEY = process.env.TWELVE_DATA_API_KEY;\n\nexport async function GET(req: NextRequest) {\n  const { searchParams } = new URL(req.url);\n  const symbol = searchParams.get('symbol');\n\n  if (!symbol) {\n    return new Response(JSON.stringify({ error: \"Missing symbol\" }), { status: 400 });\n  }\n\n  try {\n  \n    const response = await axios.get(`https://api.twelvedata.com/time_series`, {\n      params: {\n        symbol,\n        interval: \"1day\",\n        outputsize: 30,\n        apikey: TWELVE_DATA_API_KEY,\n      },\n    });\n\n  \n    const { values, status, message } = response.data;\n  \n    if (status === \"error\") {\n      console.error(\"TwelveData Error:\", message);\n      return new Response(JSON.stringify({ error: message }), { status: 500 });\n    }\n  \n    if (!values || !Array.isArray(values)) {\n      console.error(\"No 'values' in TwelveData response\");\n      return new Response(JSON.stringify({ error: \"No time series data found\" }), { status: 500 });\n    }\n  \n    const labels = values.map((entry: any) => entry.datetime).reverse();\n    const closePrices = values.map((entry: any) => parseFloat(entry.close)).reverse();\n  \n    const chartData = {\n      labels,\n      datasets: [\n        {\n          label: `${symbol.toUpperCase()} Stock Price (USD)`,\n          data: closePrices,\n          borderColor: \"#0057FF\",\n          backgroundColor: \"rgba(0, 87, 255, 0.1)\",\n          borderWidth: 2,\n          fill: true,\n          tension: 0.3,\n        },\n      ],\n    };\n  \n    return new Response(JSON.stringify(chartData), { status: 200 });\n  } catch (error) {\n    return new Response(JSON.stringify({ error: \"Failed to fetch stock data\" }), { status: 500 });\n  }\n}  "],"names":[],"mappings":";;;AACA;;AAEA,MAAM,sBAAsB,QAAQ,GAAG,CAAC,mBAAmB;AAEpD,eAAe,IAAI,GAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,SAAS,aAAa,GAAG,CAAC;IAEhC,IAAI,CAAC,QAAQ;QACX,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAAiB,IAAI;YAAE,QAAQ;QAAI;IACjF;IAEA,IAAI;QAEF,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,GAAG,CAAC,CAAC,sCAAsC,CAAC,EAAE;YACzE,QAAQ;gBACN;gBACA,UAAU;gBACV,YAAY;gBACZ,QAAQ;YACV;QACF;QAGA,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,SAAS,IAAI;QAEjD,IAAI,WAAW,SAAS;YACtB,QAAQ,KAAK,CAAC,qBAAqB;YACnC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAQ,IAAI;gBAAE,QAAQ;YAAI;QACxE;QAEA,IAAI,CAAC,UAAU,CAAC,MAAM,OAAO,CAAC,SAAS;YACrC,QAAQ,KAAK,CAAC;YACd,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAA4B,IAAI;gBAAE,QAAQ;YAAI;QAC5F;QAEA,MAAM,SAAS,OAAO,GAAG,CAAC,CAAC,QAAe,MAAM,QAAQ,EAAE,OAAO;QACjE,MAAM,cAAc,OAAO,GAAG,CAAC,CAAC,QAAe,WAAW,MAAM,KAAK,GAAG,OAAO;QAE/E,MAAM,YAAY;YAChB;YACA,UAAU;gBACR;oBACE,OAAO,GAAG,OAAO,WAAW,GAAG,kBAAkB,CAAC;oBAClD,MAAM;oBACN,aAAa;oBACb,iBAAiB;oBACjB,aAAa;oBACb,MAAM;oBACN,SAAS;gBACX;aACD;QACH;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,YAAY;YAAE,QAAQ;QAAI;IAC/D,EAAE,OAAO,OAAO;QACd,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;QAA6B,IAAI;YAAE,QAAQ;QAAI;IAC7F;AACF","debugId":null}}]
}